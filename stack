
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>

typedef struct node
{
	char data;
	struct node *next;
}stack;



stack *push(stack *top,char data)
{
	stack *new_node=(stack*)malloc(sizeof(stack));
	new_node->data=data;
	new_node->next=NULL;
	if(top==NULL)
	{
		top=new_node;
	}
	else
	{
		new_node->next=top;
		top=new_node;
	}
	return top;
}

int is_empty(stack *top)
{
	if(top==NULL)
		return 1;
	return 0;
}


stack* pop(stack *top)
{
	stack *temp=top;
//	char ch=top->data;
	top=top->next;
	free(temp);

	return top;
}


void display(stack*top)
{
	stack *temp=top;
	if(top==NULL)
	{
		printf("Stack is empty");
		return;
	}
	while(temp!=NULL)
	{
		printf("\n\t|%d|",temp->data);
		temp=temp->next;
	}
}

char readtop(stack*top)
{
	return top->data;
}

int precedence(char x)
{
	if(x=='(')
		return 0;
	if(x=='+' || x=='-')
		return 1;
	if(x=='*' || x=='/')
		return 2;
	return 3;
}
char *string_rev(char a[20], char rev[])
{
    int l = strlen(a);
    int j = 0;

    for (int i = l - 1; i >= 0; i--)
    {
        rev[j] = a[i];
        j++;
    }
    rev[j] = '\0';
    return rev;
}

void infix_postfix(char infix[20],char postfix[20])
{
	stack *top=NULL;
	int i=0,j=0;
	char token,x;

	for(i=0;infix[i]!='\0';i++)
	{
		token=infix[i];
		if(isdigit(token))
		{
			postfix[j]=token;
			j++;
		}
		else if(token=='(')
		{
			top=push(top,token);
		}
		else if(token==')')
		{
			while((x=readtop(top))!='(')
			{
				postfix[j]=x;
				j++;
				top=pop(top);
			}
			top=pop(top);
		}
		else
		{
			while(!is_empty(top) && precedence(token)<=precedence(readtop(top)))
			{
				postfix[j]=readtop(top);
				top=pop(top);
				j++;
			}
			top=push(top,token);
		}
	}

	while(is_empty(top)!=1)
	{
		postfix[j]=readtop(top);
		top=pop(top);
		j++;
	}
	postfix[j]='\0';
}


int eval_postfix(char postfix[20])
{
	stack *top=NULL;
	int i=0,j=0;
	char token,x;
	for(i=0;postfix[i]!='\0';i++)
	{
		token=postfix[i];
		if(isdigit(token))
		{
			top=push(top,token-48);
		}
		else
		{
			int op1,op2;

			op2=readtop(top);
			top=pop(top);
			op1=readtop(top);
			top=pop(top);
			switch(token)
			{
				case '+':x=op1+op2;	break;
				case '-':x=op1-op2;	break;
				case '*':x=op1*op2;	break;
				case '/':x=op1/op2;	break;
			}
			top=push(top,x);

		}
	}
	x=readtop(top);
	top=pop(top);
	return x;
}
int eval_postfix1(char postfix[20])
{
	stack *top=NULL;
	int i=0,j=0;
	char token,x;
	for(i=0;postfix[i]!='\0';i++)
	{
		token=postfix[i];
		if(isdigit(token))
		{
			top=push(top,token-48);
		}
		else
		{
			int op1,op2;

			op1=readtop(top);
			top=pop(top);
			op2=readtop(top);
			top=pop(top);
			switch(token)
			{
				case '+':x=op1+op2;	break;
				case '-':x=op1-op2;	break;
				case '*':x=op1*op2;	break;
				case '/':x=op1/op2;	break;
			}
			top=push(top,x);

		}
	}
	x=readtop(top);
	top=pop(top);
	return x;
}

int eval_prefix(char prefix[20])

{    int result;
    char rev_prefix[20];
    int l = strlen(prefix);
    int j = 0;
    char rev[20];
    for (int i = l - 1; i >= 0; i--)
    {
        if (prefix[i] == '(')
            rev_prefix[j] = ')';
        else if (prefix[i] == ')')
            rev_prefix[j] = '(';
        else
            rev_prefix[j] = prefix[i];
        j++;
    }
    rev_prefix[j] = '\0';
    result=eval_postfix1(rev_prefix);
    return result;

}






void infix_to_prefix(char infix[], char prefix[])
{
    char rev_infix[20],newprefix[20];
    int l = strlen(infix);
    int j = 0;
    char rev[20];
    for (int i = l - 1; i >= 0; i--)
    {
        if (infix[i] == '(')
            rev_infix[j] = ')';
        else if (infix[i] == ')')
            rev_infix[j] = '(';
        else
            rev_infix[j] = infix[i];
        j++;
    }
        rev_infix[j] = '\0';

    	infix_postfix(rev_infix,newprefix);
        string_rev(newprefix, rev);
        strcpy(prefix,rev);
}

int main()
{
	int choice,key,flag,n,a,result;
	char infix[20],postfix[20],prefix[20];

	do{
		printf("\n\n1. Infix to Postfix \n2. Postfix Expression Evaluation\n3. Infix to Prefix \n4. Prefix Expression Evaluation \n0. Exit");
		printf("\nEnter your choice :");
		scanf("%d",&choice);

		switch(choice)
		{
			case 1:
				printf("\n\nEnter the infix expression :");
				scanf("%s",infix);
				infix_postfix(infix,postfix);
				printf("\nPostfix Expression is :%s",postfix);
				break;

			case 2:
				result=eval_postfix(postfix);
				printf("Result after postfix evaluation is %d",result);
				break;
            case 3:
                printf("\n\nEnter the infix expression :");
				scanf("%s",infix);
				infix_to_prefix(infix,prefix);
				printf("\nPrefix Expression is :%s",prefix);
				break;
            case 4:
                result=eval_prefix(prefix);
				printf("Result after prefix evaluation is %d",result);
				break;
		}

	}while(choice!=0);
}


